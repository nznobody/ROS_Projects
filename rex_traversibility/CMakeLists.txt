#Generated by VisualGDB project wizard.
#Note: VisualGDB will automatically update this file when you add new sources to the project.

cmake_minimum_required(VERSION 2.7)
project(rex_traversibility)

## System dependencies are found with CMake's conventions
find_package(catkin REQUIRED COMPONENTS
  cmake_modules
  grid_map_ros
  grid_map_core
  grid_map_msgs
  grid_map_filters
  roscpp
  tf
  tf_conversions
  traversability_estimation_filters
  traversability_msgs
  std_msgs
  geometry_msgs
  sensor_msgs
  kindr
)
# e.g. find_package(Boost REQUIRED COMPONENTS system)
find_package(PCL REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(PkgConfig REQUIRED)
pkg_check_modules(SM_TIMING schweizer-messer-timing REQUIRED)

## Required for ros + catkin_make
catkin_package(
  INCLUDE_DIRS
    include
  LIBRARIES ${PROJECT_NAME}
  CATKIN_DEPENDS
    grid_map_ros
    grid_map_core
    grid_map_msgs
    grid_map_filters
    roscpp
    tf
    tf_conversions
    traversability_estimation_filters
    traversability_msgs
    std_msgs
    geometry_msgs
    sensor_msgs
  DEPENDS
    Eigen
)

set( LIBS ${LIBS} 
${PCL_LIBRARIES}
${Eigen3_LIBRARIES}
)
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${PCL_INCLUDE_DIRS}
  ${Eigen3_INCLUDE_DIRS}
  ${SM_TIMING_INCLUDE_DIRS}
  ${kindr_INCLUDE_DIRS}
)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")

###########
## Build ##
###########
# Add ouputs
add_library(
  ${PROJECT_NAME}
  src/TraversabilityMap.cpp
)
target_link_libraries(
  ${PROJECT_NAME}
  ${catkin_LIBRARIES}
  ${SM_TIMING_LIBRARIES}
)

add_executable(
  ${PROJECT_NAME}_node
  src/traversability_estimation_node.cpp
  src/TraversabilityEstimation.cpp
)

## Specify libraries to link a library or executable target against
target_link_libraries(${PROJECT_NAME}_node ${catkin_LIBRARIES} ${PROJECT_NAME} ${SM_TIMING_LIBRARIES} "${LIBRARIES_FROM_REFERENCES}")

#############
## Install ##
#############
## Mark executables and/or libraries for installation
install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}
   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}/
   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
   FILES_MATCHING PATTERN "*.h"
   PATTERN ".svn" EXCLUDE
)
